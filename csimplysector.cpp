#include "csimplysector.h"

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CSimplySector::CSimplySector(void)
{
 Antigravitation=false; 
 CounterChageLighting=0;
 Tick=0;
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CSimplySector::~CSimplySector()
{
 Release();
}
//----------------------------------------------------------------------------------------------------
//освободить память
//----------------------------------------------------------------------------------------------------
void CSimplySector::Release(void)
{
 vector_SPoint.clear();
 vector_WallIndex.clear();
 vector_WallPortalIndex.clear();
}

//----------------------------------------------------------------------------------------------------
//инициализация
//----------------------------------------------------------------------------------------------------
void CSimplySector::Initialize(void)
{
 Tick=0;
 DL=4;
}
//----------------------------------------------------------------------------------------------------
//обработка
//----------------------------------------------------------------------------------------------------
void CSimplySector::Processing(void)
{
 if  (LightingType==LIGHTING_MODE_FLASH)//мигание
 {
  if (CounterChageLighting>0) CounterChageLighting--;
  else
  {
   if (Lighting==BaseLighting)
   {
	CounterChageLighting=TimeMaxLighting;
    Lighting=255;
   }
   else
   {
	CounterChageLighting=TimeBaseLighting;
    Lighting=BaseLighting;
   }
  }
 }
 if  (LightingType==LIGHTING_MODE_RANDOM_FLASH)//случайное мигание
 {
  if (rand()%255>210)
  {
   if (Lighting==255) Lighting=BaseLighting;
                 else Lighting=255;
  }
 }
 if  (LightingType==LIGHTING_MODE_DAWNING_SUNDOWN)//затухание/нарастание
 {
  Lighting+=DL;
  if (Lighting>=255)
  {
   Lighting=255;
   DL=-4;
  }
  if (Lighting<=BaseLighting)
  {
   Lighting=BaseLighting;
   DL=4;
  }
 }
 //выполняем анимацию текстуры
 if (Tick==5)
 {
  cTextureFollow_Up.Processing();
  cTextureFollow_Down.Processing();
  Tick=0;
 } 
 Tick++;
}
//----------------------------------------------------------------------------------------------------
//проверка, можно ли активировать сектор из координат (x,y) с максимальным расстоянием активации length
//----------------------------------------------------------------------------------------------------
bool CSimplySector::CheckActivate(float x,float y,float length,long sector_index)
{
 long size=vector_SPoint.size();
 for(long n=0;n<size;n++)
 {
  long t1=n;
  long t2=n+1;
  if (t2>=size) t2-=size;
  float x1=vector_SPoint[t1].X;
  float y1=vector_SPoint[t1].Y;
  float x2=vector_SPoint[t2].X;
  float y2=vector_SPoint[t2].Y;
  MATH_RETURN_CODE l=CheckCollizionOfVector(x,y,length,x1,y1,x2,y2);
  if (l==MATH_RETURN_CODE_COLLIZION || Index==sector_index) return(true);
 }
 return(false);
}

//----------------------------------------------------------------------------------------------------
//загрузка
//----------------------------------------------------------------------------------------------------
void CSimplySector::Load(FILE *file)
{
 long n;
 Release();

 //загружаем список стен сектора
 long amount;
 amount=LoadLong(file);
 for(n=0;n<amount;n++)
 {
  long index=LoadLong(file);
  vector_WallIndex.push_back(index);
 }
 //загружаем список стен-порталов сектора
 amount=LoadLong(file);
 for(n=0;n<amount;n++)
 {
  long index=LoadLong(file);
  vector_WallPortalIndex.push_back(index);
 }

 long SegmentAmount=LoadLong(file);
 vector_SPoint.clear();
 for(n=0;n<SegmentAmount;n++)
 {
  SPoint sPoint;
  sPoint.X=LoadFloat(file);
  sPoint.Y=LoadFloat(file);
  vector_SPoint.push_back(sPoint);
 }
 LightingType=LoadLong(file);
 BaseLighting=LoadLong(file); 
 Lighting=BaseLighting;
 TimeBaseLighting=LoadLong(file);
 TimeMaxLighting=LoadLong(file);

 cTextureFollow_Up.Load(file);
 cTextureFollow_Down.Load(file);

 Down=LoadLong(file);
 Up=LoadLong(file);

 LoadCharArray(file,Label,SECTOR_LABEL_SIZE);
 Antigravitation=false;
 if (LoadUChar(file)) Antigravitation=true;

 XB1=LoadFloat(file);
 YB1=LoadFloat(file);
 XB2=LoadFloat(file);
 YB2=LoadFloat(file);
 CounterChageLighting=0;
}
//----------------------------------------------------------------------------------------------------
//получить индекс сектора
//----------------------------------------------------------------------------------------------------
long CSimplySector::GetIndex(void)
{
 return(Index);
}
//----------------------------------------------------------------------------------------------------
//задать индекс сектора
//----------------------------------------------------------------------------------------------------
void CSimplySector::SetIndex(long index)
{
 Index=index;
}
//----------------------------------------------------------------------------------------------------
//получить высоту потолка сектора
//----------------------------------------------------------------------------------------------------
long CSimplySector::GetUp(void)
{
 return(Up);
}
//----------------------------------------------------------------------------------------------------
//получить высоту пола сектора
//----------------------------------------------------------------------------------------------------
long CSimplySector::GetDown(void)
{
 return(Down);
}
//----------------------------------------------------------------------------------------------------
//получить ограничивающий прямоугольник
//----------------------------------------------------------------------------------------------------
void CSimplySector::GetRectangle(float &xb1,float &yb1,float &xb2,float &yb2)
{
 xb1=XB1;
 yb1=YB1;
 xb2=XB2;
 yb2=YB2;
}
//----------------------------------------------------------------------------------------------------
//получить указатель на вектор точек, задающих сектор
//----------------------------------------------------------------------------------------------------
vector<SPoint>* CSimplySector::GetSectorPointVectorPtr(void)
{
 return(&vector_SPoint);
}
//----------------------------------------------------------------------------------------------------
//получить освещённость сектора
//----------------------------------------------------------------------------------------------------
long CSimplySector::GetLighting(void)
{
 return(Lighting);
}
//----------------------------------------------------------------------------------------------------
//получить указатель на тектуру пола
//----------------------------------------------------------------------------------------------------
CTextureFollow* CSimplySector::GetCTextureFollow_Down_Ptr(void)
{
 return(&cTextureFollow_Down);
}
//----------------------------------------------------------------------------------------------------
//получить указатель на тектуру потолка
//----------------------------------------------------------------------------------------------------
CTextureFollow* CSimplySector::GetCTextureFollow_Up_Ptr(void)
{
 return(&cTextureFollow_Up);
}
//----------------------------------------------------------------------------------------------------
//получить есть ли антигравитация
//----------------------------------------------------------------------------------------------------
bool CSimplySector::GetAntigravitation(void)
{
 return(Antigravitation);
}
//----------------------------------------------------------------------------------------------------
//получить метку сектора
//----------------------------------------------------------------------------------------------------
char* CSimplySector::GetLabel(void)
{
 return(Label);
}
//----------------------------------------------------------------------------------------------------
//получить список используемых текстур
//----------------------------------------------------------------------------------------------------
void CSimplySector::CreateTextureList(vector<SUseTexture> &vector_SUseTexture)
{
 cTextureFollow_Down.CreateTextureList(vector_SUseTexture);
 cTextureFollow_Up.CreateTextureList(vector_SUseTexture);
}
//----------------------------------------------------------------------------------------------------
//заменить индексы текстур в соответствии со списком
//----------------------------------------------------------------------------------------------------
void CSimplySector::RefreshTextureIndex(vector<SUseTexture> &vector_SUseTexture)
{
 cTextureFollow_Down.RefreshTextureIndex(vector_SUseTexture);
 cTextureFollow_Up.RefreshTextureIndex(vector_SUseTexture);
}
//----------------------------------------------------------------------------------------------------
//получить указатель на вектор индексов стен
//----------------------------------------------------------------------------------------------------
vector<unsigned long>* CSimplySector::GetVectorWallIndex(void)
{
 return(&vector_WallIndex);
}
//----------------------------------------------------------------------------------------------------
//получить указатель на вектор индексов стен-порталов
//----------------------------------------------------------------------------------------------------
vector<unsigned long>* CSimplySector::GetVectorWallPortalIndex(void)
{
 return(&vector_WallPortalIndex);
}
//----------------------------------------------------------------------------------------------------
//активация
//----------------------------------------------------------------------------------------------------
void CSimplySector::Activate(void)
{
}
//----------------------------------------------------------------------------------------------------
//заблокировать
//----------------------------------------------------------------------------------------------------
void CSimplySector::Lock(void)
{
}
//----------------------------------------------------------------------------------------------------
//разблокировать
//----------------------------------------------------------------------------------------------------
void CSimplySector::Unlock(void)
{
}
//----------------------------------------------------------------------------------------------------
//задать уровень пола
//----------------------------------------------------------------------------------------------------
void CSimplySector::SetDown(long value)
{
 Down=value;
}
//----------------------------------------------------------------------------------------------------
//задать уровень потолка
//----------------------------------------------------------------------------------------------------
void CSimplySector::SetUp(long value)
{
 Up=value;
}
//----------------------------------------------------------------------------------------------------
//получить индекс сектора для активации
//----------------------------------------------------------------------------------------------------
long CSimplySector::GetActivatedSectorIndex(void)
{
 return(-1);
}
//----------------------------------------------------------------------------------------------------
//получить координаты телепортации
//----------------------------------------------------------------------------------------------------
bool CSimplySector::GetTeleportCoord(long &x,long &y)
{
 return(false);
}

