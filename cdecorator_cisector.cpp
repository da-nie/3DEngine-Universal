#include "cdecorator_cisector.h"

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CDecorator_CISector::CDecorator_CISector(CISector *cISector_Set_Ptr)
{
 cISector_Ptr=cISector_Set_Ptr;
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CDecorator_CISector::~CDecorator_CISector()
{
 delete(cISector_Ptr);
}
//----------------------------------------------------------------------------------------------------
//освободить память
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::Release(void)
{
 cISector_Ptr->Release();
}
//----------------------------------------------------------------------------------------------------
//инициализация
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::Initialize(void)
{
 cISector_Ptr->Initialize();
}
//----------------------------------------------------------------------------------------------------
//обработка
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::Processing(void)
{
 cISector_Ptr->Processing();
}
//----------------------------------------------------------------------------------------------------
//проверка, можно ли активировать сектор из координат (x,y) с максимальным расстоянием активации length
//----------------------------------------------------------------------------------------------------
bool CDecorator_CISector::CheckActivate(float x,float y,float length,long sector_index)
{
 return(cISector_Ptr->CheckActivate(x,y,length,sector_index));
}

//----------------------------------------------------------------------------------------------------
//загрузка
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::Load(FILE *file)
{
 cISector_Ptr->Load(file);
}
//----------------------------------------------------------------------------------------------------
//получить индекс сектора
//----------------------------------------------------------------------------------------------------
long CDecorator_CISector::GetIndex(void)
{
 return(cISector_Ptr->GetIndex());
}
//----------------------------------------------------------------------------------------------------
//задать индекс сектора
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::SetIndex(long index)
{
 cISector_Ptr->SetIndex(index);
}
//----------------------------------------------------------------------------------------------------
//получить высоту потолка сектора
//----------------------------------------------------------------------------------------------------
long CDecorator_CISector::GetUp(void)
{
 return(cISector_Ptr->GetUp());
}
//----------------------------------------------------------------------------------------------------
//получить высоту пола сектора
//----------------------------------------------------------------------------------------------------
long CDecorator_CISector::GetDown(void)
{
 return(cISector_Ptr->GetDown());
}
//----------------------------------------------------------------------------------------------------
//получить ограничивающий прямоугольник
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::GetRectangle(float &xb1,float &yb1,float &xb2,float &yb2)
{
 cISector_Ptr->GetRectangle(xb1,yb1,xb2,yb2);
}
//----------------------------------------------------------------------------------------------------
//получить указатель на вектор точек, задающих сектор
//----------------------------------------------------------------------------------------------------
vector<SPoint>* CDecorator_CISector::GetSectorPointVectorPtr(void)
{
 return(cISector_Ptr->GetSectorPointVectorPtr());
}
//----------------------------------------------------------------------------------------------------
//получить освещённость сектора
//----------------------------------------------------------------------------------------------------
long CDecorator_CISector::GetLighting(void)
{
 return(cISector_Ptr->GetLighting());
}
//----------------------------------------------------------------------------------------------------
//получить указатель на тектуру пола
//----------------------------------------------------------------------------------------------------
CTextureFollow* CDecorator_CISector::GetCTextureFollow_Down_Ptr(void)
{
 return(cISector_Ptr->GetCTextureFollow_Down_Ptr());
}
//----------------------------------------------------------------------------------------------------
//получить указатель на тектуру потолка
//----------------------------------------------------------------------------------------------------
CTextureFollow* CDecorator_CISector::GetCTextureFollow_Up_Ptr(void)
{
 return(cISector_Ptr->GetCTextureFollow_Up_Ptr());
}
//----------------------------------------------------------------------------------------------------
//получить есть ли антигравитация
//----------------------------------------------------------------------------------------------------
bool CDecorator_CISector::GetAntigravitation(void)
{
 return(cISector_Ptr->GetAntigravitation());
}
//----------------------------------------------------------------------------------------------------
//получить метку сектора
//----------------------------------------------------------------------------------------------------
char* CDecorator_CISector::GetLabel(void)
{
 return(cISector_Ptr->GetLabel());
}
//----------------------------------------------------------------------------------------------------
//получить список используемых текстур
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::CreateTextureList(vector<SUseTexture> &vector_SUseTexture)
{
 cISector_Ptr->CreateTextureList(vector_SUseTexture);
}
//----------------------------------------------------------------------------------------------------
//заменить индексы текстур в соответствии со списком
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::RefreshTextureIndex(vector<SUseTexture> &vector_SUseTexture)
{
 cISector_Ptr->RefreshTextureIndex(vector_SUseTexture);
}
//----------------------------------------------------------------------------------------------------
//получить указатель на вектор индексов стен
//----------------------------------------------------------------------------------------------------
vector<unsigned long>* CDecorator_CISector::GetVectorWallIndex(void)
{
 return(cISector_Ptr->GetVectorWallIndex());
}
//----------------------------------------------------------------------------------------------------
//получить указатель на вектор индексов стен-порталов
//----------------------------------------------------------------------------------------------------
vector<unsigned long>* CDecorator_CISector::GetVectorWallPortalIndex(void)
{
 return(cISector_Ptr->GetVectorWallPortalIndex());
}
//----------------------------------------------------------------------------------------------------
//активация
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::Activate(void)
{
 cISector_Ptr->Activate();
}
//----------------------------------------------------------------------------------------------------
//заблокировать
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::Lock(void)
{
 cISector_Ptr->Lock();
}
//----------------------------------------------------------------------------------------------------
//разблокировать
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::Unlock(void)
{
 cISector_Ptr->Unlock();
}
//----------------------------------------------------------------------------------------------------
//задать уровень пола
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::SetDown(long value)
{
 cISector_Ptr->SetDown(value);
}
//----------------------------------------------------------------------------------------------------
//задать уровень потолка
//----------------------------------------------------------------------------------------------------
void CDecorator_CISector::SetUp(long value)
{
 cISector_Ptr->SetUp(value);
}
//----------------------------------------------------------------------------------------------------
//получить индекс сектора для активации
//----------------------------------------------------------------------------------------------------
long CDecorator_CISector::GetActivatedSectorIndex(void)
{
 return(cISector_Ptr->GetActivatedSectorIndex());
}
//----------------------------------------------------------------------------------------------------
//получить координаты телепортации
//----------------------------------------------------------------------------------------------------
bool CDecorator_CISector::GetTeleportCoord(long &x,long &y)
{
 return(cISector_Ptr->GetTeleportCoord(x,y));
}